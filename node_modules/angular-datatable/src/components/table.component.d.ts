import { EventEmitter, QueryList, TemplateRef, OnInit } from '@angular/core';
import { DataTableColumn } from './column.component';
import { DataTableRow } from './row.component';
import { DataTableParams, DataTableSortCallback } from './types';
import { RowCallback } from './types';
import { DataTableTranslations } from './types';
import * as ɵngcc0 from '@angular/core';
export declare class DataTable implements DataTableParams, OnInit {
    private _items;
    items: any[];
    itemCount: number;
    columns: QueryList<DataTableColumn>;
    rows: QueryList<DataTableRow>;
    expandTemplate: TemplateRef<any>;
    headerTitle: string;
    header: boolean;
    pagination: boolean;
    indexColumn: boolean;
    indexColumnHeader: string;
    rowColors: RowCallback;
    rowTooltip: RowCallback;
    selectColumn: boolean;
    multiSelect: boolean;
    substituteRows: boolean;
    expandableRows: boolean;
    translations: DataTableTranslations;
    selectOnRowClick: boolean;
    autoReload: boolean;
    showReloading: boolean;
    showDownloadButton: boolean;
    indexColumnVisible: boolean;
    selectColumnVisible: boolean;
    expandColumnVisible: boolean;
    private _sortBy;
    private _sortAsc;
    private _customSort;
    private _offset;
    private _limit;
    sortBy: string;
    sortAsc: boolean;
    customSort: DataTableSortCallback;
    offset: number;
    limit: number;
    page: number;
    readonly lastPage: number;
    sort(sortBy: string, asc: boolean, customSort: DataTableSortCallback): void;
    ngOnInit(): void;
    private _initDefaultValues();
    private _initDefaultClickEvents();
    _reloading: boolean;
    readonly reloading: boolean;
    reload: EventEmitter<{}>;
    reloadItems(): void;
    private _onReloadFinished();
    _displayParams: DataTableParams;
    readonly displayParams: DataTableParams;
    _updateDisplayParams(): void;
    _scheduledReload: any;
    _triggerReload(): void;
    download: EventEmitter<{}>;
    downloadItems(): void;
    rowClick: EventEmitter<{}>;
    rowDoubleClick: EventEmitter<{}>;
    headerClick: EventEmitter<{}>;
    cellClick: EventEmitter<{}>;
    rowExpandChange: EventEmitter<{}>;
    private rowClicked(row, event);
    private rowDoubleClicked(row, event);
    private headerClicked(column, event);
    private cellClicked(column, row, event);
    private _getRemoteParameters();
    private sortColumn(column);
    readonly columnCount: number;
    private getRowColor(item, index, row);
    selectedRow: DataTableRow;
    selectedRows: DataTableRow[];
    private _selectAllCheckbox;
    selectAllCheckbox: boolean;
    private _onSelectAllChanged(value);
    onRowSelectChanged(row: DataTableRow): void;
    onRowExpandChanged(row: DataTableRow): void;
    readonly substituteItems: {}[];
    private _resizeInProgress;
    private resizeColumnStart(event, column, columnElement);
    resizeLimit: number;
    private _isResizeInLimit(columnElement, dx);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DataTable, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DataTable, "data-table", never, { "header": "header"; "pagination": "pagination"; "indexColumn": "indexColumn"; "indexColumnHeader": "indexColumnHeader"; "selectColumn": "selectColumn"; "multiSelect": "multiSelect"; "substituteRows": "substituteRows"; "expandableRows": "expandableRows"; "translations": "translations"; "selectOnRowClick": "selectOnRowClick"; "autoReload": "autoReload"; "showReloading": "showReloading"; "showDownloadButton": "showDownloadButton"; "items": "items"; "sortBy": "sortBy"; "sortAsc": "sortAsc"; "customSort": "customSort"; "offset": "offset"; "limit": "limit"; "page": "page"; "itemCount": "itemCount"; "headerTitle": "headerTitle"; "rowColors": "rowColors"; "rowTooltip": "rowTooltip"; }, { "reload": "reload"; "download": "download"; "rowClick": "rowClick"; "rowDoubleClick": "rowDoubleClick"; "headerClick": "headerClick"; "cellClick": "cellClick"; "rowExpandChange": "rowExpandChange"; }, ["expandTemplate", "columns"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRhYmxlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgVGVtcGxhdGVSZWYsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0YVRhYmxlQ29sdW1uIH0gZnJvbSAnLi9jb2x1bW4uY29tcG9uZW50JztcbmltcG9ydCB7IERhdGFUYWJsZVJvdyB9IGZyb20gJy4vcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRhVGFibGVQYXJhbXMsIERhdGFUYWJsZVNvcnRDYWxsYmFjayB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgUm93Q2FsbGJhY2sgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IERhdGFUYWJsZVRyYW5zbGF0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF0YVRhYmxlIGltcGxlbWVudHMgRGF0YVRhYmxlUGFyYW1zLCBPbkluaXQge1xuICAgIHByaXZhdGUgX2l0ZW1zO1xuICAgIGl0ZW1zOiBhbnlbXTtcbiAgICBpdGVtQ291bnQ6IG51bWJlcjtcbiAgICBjb2x1bW5zOiBRdWVyeUxpc3Q8RGF0YVRhYmxlQ29sdW1uPjtcbiAgICByb3dzOiBRdWVyeUxpc3Q8RGF0YVRhYmxlUm93PjtcbiAgICBleHBhbmRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBoZWFkZXJUaXRsZTogc3RyaW5nO1xuICAgIGhlYWRlcjogYm9vbGVhbjtcbiAgICBwYWdpbmF0aW9uOiBib29sZWFuO1xuICAgIGluZGV4Q29sdW1uOiBib29sZWFuO1xuICAgIGluZGV4Q29sdW1uSGVhZGVyOiBzdHJpbmc7XG4gICAgcm93Q29sb3JzOiBSb3dDYWxsYmFjaztcbiAgICByb3dUb29sdGlwOiBSb3dDYWxsYmFjaztcbiAgICBzZWxlY3RDb2x1bW46IGJvb2xlYW47XG4gICAgbXVsdGlTZWxlY3Q6IGJvb2xlYW47XG4gICAgc3Vic3RpdHV0ZVJvd3M6IGJvb2xlYW47XG4gICAgZXhwYW5kYWJsZVJvd3M6IGJvb2xlYW47XG4gICAgdHJhbnNsYXRpb25zOiBEYXRhVGFibGVUcmFuc2xhdGlvbnM7XG4gICAgc2VsZWN0T25Sb3dDbGljazogYm9vbGVhbjtcbiAgICBhdXRvUmVsb2FkOiBib29sZWFuO1xuICAgIHNob3dSZWxvYWRpbmc6IGJvb2xlYW47XG4gICAgc2hvd0Rvd25sb2FkQnV0dG9uOiBib29sZWFuO1xuICAgIGluZGV4Q29sdW1uVmlzaWJsZTogYm9vbGVhbjtcbiAgICBzZWxlY3RDb2x1bW5WaXNpYmxlOiBib29sZWFuO1xuICAgIGV4cGFuZENvbHVtblZpc2libGU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfc29ydEJ5O1xuICAgIHByaXZhdGUgX3NvcnRBc2M7XG4gICAgcHJpdmF0ZSBfY3VzdG9tU29ydDtcbiAgICBwcml2YXRlIF9vZmZzZXQ7XG4gICAgcHJpdmF0ZSBfbGltaXQ7XG4gICAgc29ydEJ5OiBzdHJpbmc7XG4gICAgc29ydEFzYzogYm9vbGVhbjtcbiAgICBjdXN0b21Tb3J0OiBEYXRhVGFibGVTb3J0Q2FsbGJhY2s7XG4gICAgb2Zmc2V0OiBudW1iZXI7XG4gICAgbGltaXQ6IG51bWJlcjtcbiAgICBwYWdlOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgbGFzdFBhZ2U6IG51bWJlcjtcbiAgICBzb3J0KHNvcnRCeTogc3RyaW5nLCBhc2M6IGJvb2xlYW4sIGN1c3RvbVNvcnQ6IERhdGFUYWJsZVNvcnRDYWxsYmFjayk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBwcml2YXRlIF9pbml0RGVmYXVsdFZhbHVlcygpO1xuICAgIHByaXZhdGUgX2luaXREZWZhdWx0Q2xpY2tFdmVudHMoKTtcbiAgICBfcmVsb2FkaW5nOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHJlbG9hZGluZzogYm9vbGVhbjtcbiAgICByZWxvYWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgcmVsb2FkSXRlbXMoKTogdm9pZDtcbiAgICBwcml2YXRlIF9vblJlbG9hZEZpbmlzaGVkKCk7XG4gICAgX2Rpc3BsYXlQYXJhbXM6IERhdGFUYWJsZVBhcmFtcztcbiAgICByZWFkb25seSBkaXNwbGF5UGFyYW1zOiBEYXRhVGFibGVQYXJhbXM7XG4gICAgX3VwZGF0ZURpc3BsYXlQYXJhbXMoKTogdm9pZDtcbiAgICBfc2NoZWR1bGVkUmVsb2FkOiBhbnk7XG4gICAgX3RyaWdnZXJSZWxvYWQoKTogdm9pZDtcbiAgICBkb3dubG9hZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBkb3dubG9hZEl0ZW1zKCk6IHZvaWQ7XG4gICAgcm93Q2xpY2s6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgcm93RG91YmxlQ2xpY2s6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgaGVhZGVyQ2xpY2s6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2VsbENsaWNrOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIHJvd0V4cGFuZENoYW5nZTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBwcml2YXRlIHJvd0NsaWNrZWQocm93LCBldmVudCk7XG4gICAgcHJpdmF0ZSByb3dEb3VibGVDbGlja2VkKHJvdywgZXZlbnQpO1xuICAgIHByaXZhdGUgaGVhZGVyQ2xpY2tlZChjb2x1bW4sIGV2ZW50KTtcbiAgICBwcml2YXRlIGNlbGxDbGlja2VkKGNvbHVtbiwgcm93LCBldmVudCk7XG4gICAgcHJpdmF0ZSBfZ2V0UmVtb3RlUGFyYW1ldGVycygpO1xuICAgIHByaXZhdGUgc29ydENvbHVtbihjb2x1bW4pO1xuICAgIHJlYWRvbmx5IGNvbHVtbkNvdW50OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBnZXRSb3dDb2xvcihpdGVtLCBpbmRleCwgcm93KTtcbiAgICBzZWxlY3RlZFJvdzogRGF0YVRhYmxlUm93O1xuICAgIHNlbGVjdGVkUm93czogRGF0YVRhYmxlUm93W107XG4gICAgcHJpdmF0ZSBfc2VsZWN0QWxsQ2hlY2tib3g7XG4gICAgc2VsZWN0QWxsQ2hlY2tib3g6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfb25TZWxlY3RBbGxDaGFuZ2VkKHZhbHVlKTtcbiAgICBvblJvd1NlbGVjdENoYW5nZWQocm93OiBEYXRhVGFibGVSb3cpOiB2b2lkO1xuICAgIG9uUm93RXhwYW5kQ2hhbmdlZChyb3c6IERhdGFUYWJsZVJvdyk6IHZvaWQ7XG4gICAgcmVhZG9ubHkgc3Vic3RpdHV0ZUl0ZW1zOiB7fVtdO1xuICAgIHByaXZhdGUgX3Jlc2l6ZUluUHJvZ3Jlc3M7XG4gICAgcHJpdmF0ZSByZXNpemVDb2x1bW5TdGFydChldmVudCwgY29sdW1uLCBjb2x1bW5FbGVtZW50KTtcbiAgICByZXNpemVMaW1pdDogbnVtYmVyO1xuICAgIHByaXZhdGUgX2lzUmVzaXplSW5MaW1pdChjb2x1bW5FbGVtZW50LCBkeCk7XG59XG4iXX0=